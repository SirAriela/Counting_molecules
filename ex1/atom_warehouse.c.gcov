        -:    0:Source:atom_warehouse.c
        -:    1:#include <poll.h>
        -:    2:#include <unistd.h>
        -:    3:#include <stdio.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <string.h>
        -:    6:#include <sys/socket.h>
        -:    7:#include <netinet/in.h>
        -:    8:#include <arpa/inet.h>
        -:    9:#include <signal.h>
        -:   10:
        -:   11:#define BACKLOG 10
        -:   12:#define MAX_CLIENTS 10
        -:   13:
        -:   14:volatile sig_atomic_t running = 1;
        -:   15:
        6:   16:void handle_sigint(int sig) {
        6:   17:    running = 0;
        6:   18:    printf("\nSIGINT received â€” shutting down server gracefully... bli neder\n");
        6:   19:}
        -:   20:
        -:   21:typedef struct wareHouse {
        -:   22:    unsigned long long carbon;
        -:   23:    unsigned long long hydrogen;
        -:   24:    unsigned long long oxygen;
        -:   25:} wareHouse;
        -:   26:
       10:   27:void addAtom(int atom, int quantity, wareHouse *warehouse) {
       10:   28:    switch (atom) {
        4:   29:        case 1: warehouse->carbon += quantity; break;
        3:   30:        case 2: warehouse->hydrogen += quantity; break;
        3:   31:        case 3: warehouse->oxygen += quantity; break;
    #####:   32:        default: printf("Unknown atom type\n"); break;
        -:   33:    }
       10:   34:}
        -:   35:
       10:   36:void printAtoms(wareHouse *warehouse) {
       10:   37:    printf("Carbon: %llu\n", warehouse->carbon);
       10:   38:    printf("Hydrogen: %llu\n", warehouse->hydrogen);
       10:   39:    printf("Oxygen: %llu\n", warehouse->oxygen);
       10:   40:}
        -:   41:
       17:   42:int main(int argc, char *argv[]) {
       17:   43:    if (argc != 2) {
        2:   44:        fprintf(stderr, "Usage: %s <port>\n", argv[0]);
        2:   45:        return 1;
        -:   46:    }
        -:   47:
       15:   48:    signal(SIGINT, handle_sigint);
        -:   49:
       15:   50:    wareHouse warehouse = {0};
       15:   51:    const char *atoms[] = {"CARBON", "HYDROGEN", "OXYGEN"};
       15:   52:    int port = atoi(argv[1]);
        -:   53:
       15:   54:    if (port <= 0 || port > 65535) {
        3:   55:        fprintf(stderr, "Invalid port number: %d\n", port);
        3:   56:        return 1;
        -:   57:    }
        -:   58:    // Create a listening socket
       12:   59:    int listen_fd = socket(AF_INET, SOCK_STREAM, 0);
       12:   60:    if (listen_fd < 0) {
    #####:   61:        perror("socket");
    #####:   62:        return 1;
        -:   63:    }
        -:   64:
        -:   65:    // Set socket options to allow reuse of the address
       12:   66:    int opt = 1;
       12:   67:    setsockopt(listen_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
        -:   68:
       12:   69:    struct sockaddr_in serv_addr = {
        -:   70:        .sin_family = AF_INET,
       12:   71:        .sin_port = htons(port),
        -:   72:        .sin_addr.s_addr = INADDR_ANY
        -:   73:    };
        -:   74:
       12:   75:    if (bind(listen_fd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        6:   76:        perror("bind");
        6:   77:        close(listen_fd);
        6:   78:        return 1;
        -:   79:    }
        -:   80:
        6:   81:    if (listen(listen_fd, BACKLOG) < 0) {
    #####:   82:        perror("listen");
    #####:   83:        close(listen_fd);
    #####:   84:        return 1;
        -:   85:    }
        -:   86:
        -:   87:    struct pollfd fds[MAX_CLIENTS];
        6:   88:    int nfds = 1;
        6:   89:    fds[0].fd = listen_fd;
        6:   90:    fds[0].events = POLLIN;
        -:   91:
        6:   92:    printf("Server running on port %d...\n", port);
        -:   93:
      165:   94:    while (running) {
      164:   95:        int ready = poll(fds, nfds, 1000);
      164:   96:        if (ready < 0) {
        5:   97:            if (!running) break;
    #####:   98:            perror("poll");
    #####:   99:            break;
        -:  100:        }
        -:  101:
      159:  102:        if (ready == 0) continue; // timeout, no events
        -:  103:
        -:  104:        // Handle new connections first
      112:  105:        if (fds[0].revents & POLLIN) {
       26:  106:            int client_fd = accept(listen_fd, NULL, NULL);
       26:  107:            if (client_fd >= 0 && nfds < MAX_CLIENTS) {
       23:  108:                fds[nfds].fd = client_fd;
       23:  109:                fds[nfds].events = POLLIN;
       23:  110:                fds[nfds].revents = 0; // Clear revents
       23:  111:                nfds++;
       23:  112:                printf("New client connected: fd=%d\n", client_fd);
        3:  113:            } else if (client_fd >= 0) {
        3:  114:                printf("Max clients reached, rejecting connection\n");
        3:  115:                close(client_fd);
        -:  116:            }
        -:  117:        }
        -:  118:
        -:  119:        // Handle client data - process from end to beginning to avoid index issues
      393:  120:        for (int i = nfds - 1; i >= 1; i--) {
      281:  121:            if (fds[i].revents & POLLIN) {
        -:  122:                char buffer[256];
       91:  123:                ssize_t len = read(fds[i].fd, buffer, sizeof(buffer) - 1);
        -:  124:
       91:  125:                if (len <= 0) {
       21:  126:                    printf("Client disconnected: fd=%d\n", fds[i].fd);
       21:  127:                    close(fds[i].fd);
        -:  128:                    // Move last element to current position
       21:  129:                    if (i < nfds - 1) {
       11:  130:                        fds[i] = fds[nfds - 1];
        -:  131:                    }
       21:  132:                    nfds--;
        -:  133:                } else {
       70:  134:                    buffer[len] = '\0';
        -:  135:                    // Remove newline if present
       70:  136:                    char *newline = strchr(buffer, '\n');
      70*:  137:                    if (newline) *newline = '\0';
        -:  138:                    
        -:  139:                    char atom[16];
       70:  140:                    int quantity = 0;
       70:  141:                    if (sscanf(buffer, "ADD %15s %d", atom, &quantity) == 2 && quantity > 0) {
       14:  142:                        int index_atom = -1;
       35:  143:                        for (int j = 0; j < 3; j++) {
       31:  144:                            if (strcmp(atom, atoms[j]) == 0) {
       10:  145:                                index_atom = j + 1;
       10:  146:                                break;
        -:  147:                            }
        -:  148:                        }
       14:  149:                        if (index_atom > 0) {
       10:  150:                            addAtom(index_atom, quantity, &warehouse);
       10:  151:                            printf("Added %d %s\n", quantity, atom);
       10:  152:                            printAtoms(&warehouse);
        -:  153:                        } else {
        4:  154:                            printf("Error: Unknown atom type '%s'\n", atom);
        -:  155:                        }
        -:  156:                    } 
        -:  157:                }
        -:  158:            }
        -:  159:        }
        -:  160:        
        -:  161:        // Clear all revents for next iteration
      484:  162:        for (int i = 0; i < nfds; i++) {
      372:  163:            fds[i].revents = 0;
        -:  164:        }
        -:  165:    }
        -:  166:    // here only if running is false - signal CTRL C
        6:  167:    printf("Shutting down server...\n");
        8:  168:    for (int i = 1; i < nfds; i++) {
        2:  169:        close(fds[i].fd);
        -:  170:    }
        -:  171:
        6:  172:    close(listen_fd);
        6:  173:    printf("Server terminated.\n");
        6:  174:    return 0;
        -:  175:}
