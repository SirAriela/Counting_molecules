        -:    0:Source:atom_supplier.c
        -:    1:#include <poll.h>
        -:    2:#include <unistd.h>
        -:    3:#include <stdio.h>
        -:    4:#include <unistd.h>
        -:    5:#include <sys/socket.h>
        -:    6:#include <string.h>
        -:    7:#include <netinet/in.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <arpa/inet.h>
        -:   10:
        -:   11:#define EXIT_FAILURE 1
        -:   12:#define NFDS 2
        -:   13:
       43:   14:int main(int argc, char *argv[])
        -:   15:{
       43:   16:    int running = 1;
       43:   17:    if (argc != 3)
        -:   18:    {
        2:   19:        fprintf(stderr, "Usage: %s <server_ip> <port>\n", argv[0]);
       31:   20:        return 1;
        -:   21:    }
        -:   22:
       41:   23:    const char *server_ip = argv[1];
       41:   24:    int port = atoi(argv[2]);
        -:   25:
       41:   26:    int sockfd = socket(AF_INET, SOCK_STREAM, 0);
       41:   27:    if (sockfd < 0)
        -:   28:    {
    #####:   29:        perror("socket");
    #####:   30:        return 1;
        -:   31:    }
        -:   32:
        -:   33:    struct sockaddr_in server_addr;
       41:   34:    server_addr.sin_family = AF_INET;
       41:   35:    server_addr.sin_port = htons(port);
       41:   36:    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0)
        -:   37:    {
        1:   38:        perror("inet_pton");
        1:   39:        close(sockfd);
        1:   40:        return 1;
        -:   41:    }
        -:   42:
       40:   43:    if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0)
        -:   44:    {
       28:   45:        perror("connect");
       28:   46:        close(sockfd);
       28:   47:        return 1;
        -:   48:    }
        -:   49:
        -:   50:    // //receive a message from the server
        -:   51:    struct pollfd fds[2];
       12:   52:    fds[0].fd = sockfd;
       12:   53:    fds[0].events = POLLIN;
       12:   54:    fds[1].fd = STDIN_FILENO;
       12:   55:    fds[1].events = POLLIN;
        -:   56:
       12:   57:    printf("Connected to warehouse server at %s:%d\n", server_ip, port);
 17418317:   58:    while (running)
        -:   59:    {
 17418316:   60:        int poll_count = poll(fds, NFDS, -1);
 17418316:   61:        if (poll_count < 0)
        -:   62:        {
    #####:   63:            perror("poll");
    #####:   64:            break;
        -:   65:        }
 17418316:   66:        if (fds[0].revents & POLLIN)
        -:   67:        {
        -:   68:            int code;
       11:   69:            ssize_t bytes_read = read(sockfd, &code, sizeof(code));
       11:   70:            if (bytes_read <= 0)
        -:   71:            {
       10:   72:                perror("read");
       10:   73:                break;
        -:   74:            }
        1:   75:            running = 0;
        1:   76:            close(sockfd);
        -:   77:        }
 17418306:   78:        if (fds[1].revents & POLLIN)
        -:   79:        {
        -:   80:            char buffer[1024];
        6:   81:            fgets(buffer, sizeof(buffer), stdin);
        -:   82:
        6:   83:            buffer[strcspn(buffer, "\n")] = 0;
        -:   84:
        6:   85:            if (strcmp(buffer, "EXIT") == 0)
        -:   86:            {
        1:   87:                printf("Exiting by user request.\n");
        1:   88:                running = 0;
        1:   89:                close(sockfd);
        1:   90:                break;
        -:   91:            }
        -:   92:
        5:   93:            send(sockfd, buffer, sizeof(buffer), 0);
        5:   94:            printf("Sent message to server: %s\n", buffer);
        -:   95:        }
        -:   96:    }
        -:   97:}
